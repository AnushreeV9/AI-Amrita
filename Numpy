{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "numpy practise.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyOGXV9ZhjSKpATmtzE4u364",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AnushreeV9/AI-Amrita/blob/main/Numpy\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TivkMr85MeUj"
      },
      "source": [
        "import numpy as np"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_LIDfsfYQkXr"
      },
      "source": [
        "Arrays"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xRuJ7M72Ms2e",
        "outputId": "9e2dffc3-e4fd-4953-98d5-8840b2ba0701"
      },
      "source": [
        "a=np.array([1,2,3])\n",
        "print(type(a))\n",
        "print(a.shape)\n",
        "print(a[0],a[1],a[2])\n",
        "a[0]=5\n",
        "print(a)\n"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'numpy.ndarray'>\n",
            "(3,)\n",
            "1 2 3\n",
            "[5 2 3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mqd0XUpHMBrF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8ad5bca0-63e7-4045-aae3-743fb43085d2"
      },
      "source": [
        "b = np.array([[1,2,3],[4,5,6]])\n",
        "print(b.shape)\n",
        "print(b[0,0],b[0,1],b[1,0])"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(2, 3)\n",
            "1 2 4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n1I-EFDiPedk",
        "outputId": "61a52483-aae3-4cbc-fdd9-34e43d344de2"
      },
      "source": [
        "a=np.zeros((2,2))\n",
        "print(a)\n",
        "b= np.ones((1,2))\n",
        "print(b)\n",
        "c=np.full((2,2),7)\n",
        "print(c)\n",
        "d=np.eye(2)\n",
        "print(d)\n",
        "e=np.random.random((2,2))\n",
        "print(e)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0. 0.]\n",
            " [0. 0.]]\n",
            "[[1. 1.]]\n",
            "[[7 7]\n",
            " [7 7]]\n",
            "[[1. 0.]\n",
            " [0. 1.]]\n",
            "[[0.96434397 0.1284727 ]\n",
            " [0.18248375 0.11447756]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w66FqrWdQu5t"
      },
      "source": [
        "Array indexing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C0T4MX_IQgDL",
        "outputId": "808158fb-3bb0-43e2-d883-c6155605fbf2"
      },
      "source": [
        "a=np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])\n",
        "b=a[:2,1:3]\n",
        "print(a[0,1])\n",
        "b[0,0]=77\n",
        "print(a[0,1])\n",
        "\n",
        "row_r1=a[1,:]\n",
        "row_r2=a[1:2, :]\n",
        "print(row_r1,row_r1.shape)\n",
        "print(row_r2,row_r2.shape)\n",
        "\n",
        "col_r1=a[:,1]\n",
        "col_r2=a[:,1:2]\n",
        "print(col_r1,col_r1.shape)\n",
        "print(col_r2,col_r2.shape)\n",
        "\n"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "77\n",
            "[5 6 7 8] (4,)\n",
            "[[5 6 7 8]] (1, 4)\n",
            "[77  6 10] (3,)\n",
            "[[77]\n",
            " [ 6]\n",
            " [10]] (3, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mxjlieo-Se6w",
        "outputId": "e239aab5-0212-42e5-bade-0b9990eeb552"
      },
      "source": [
        "a = np.array([[1,2], [3, 4], [5, 6]])\n",
        "# integer array indexing.\n",
        "print(a[[0, 1, 2], [0, 1, 0]])  \n",
        "print(np.array([a[0, 0], a[1, 1], a[2, 0]])) \n",
        "print(a[[0, 0], [1, 1]])  # Prints \"[2 2]\"\n",
        "print(np.array([a[0, 1], a[0, 1]]))  # Prints \"[2 2]\""
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 4 5]\n",
            "[1 4 5]\n",
            "[2 2]\n",
            "[2 2]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1AzFfRvbWyfM",
        "outputId": "05d0a352-b0c4-4c7d-b433-1c75f5249d47"
      },
      "source": [
        "a = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])\n",
        "\n",
        "print(a)  \n",
        "b = np.array([0, 2, 0, 1])\n",
        "print(a[np.arange(4), b])  \n",
        "a[np.arange(4), b] += 10\n",
        "print(a) "
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 1  2  3]\n",
            " [ 4  5  6]\n",
            " [ 7  8  9]\n",
            " [10 11 12]]\n",
            "[ 1  6  7 11]\n",
            "[[11  2  3]\n",
            " [ 4  5 16]\n",
            " [17  8  9]\n",
            " [10 21 12]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "21xMgsR7Xqyc"
      },
      "source": [
        "Boolean array indexing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cnqtflsoXouK",
        "outputId": "82413034-a6b0-44ec-ddee-f07d12a2393f"
      },
      "source": [
        "a = np.array([[1,2], [3, 4], [5, 6]])\n",
        "\n",
        "bool_idx = (a > 2)  \n",
        "print(bool_idx)     \n",
        "print(a[bool_idx]) \n",
        "print(a[a > 2])     "
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[False False]\n",
            " [ True  True]\n",
            " [ True  True]]\n",
            "[3 4 5 6]\n",
            "[3 4 5 6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gmYmziHPYB45"
      },
      "source": [
        "Datatypes"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NvO1YsKbYGTT",
        "outputId": "23e2ac06-834b-43c9-d61e-c27ddc077967"
      },
      "source": [
        "x = np.array([1, 2])   \n",
        "print(x.dtype)         \n",
        "\n",
        "x = np.array([1.0, 2.0])   \n",
        "print(x.dtype)            \n",
        "\n",
        "x = np.array([1, 2], dtype=np.int64)  \n",
        "print(x.dtype)               "
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "int64\n",
            "float64\n",
            "int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Br1-ocQpYROd"
      },
      "source": [
        "Array math"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t-NB0tLFYVDy",
        "outputId": "524b4b14-863b-48f8-f1b5-f34d04c7291e"
      },
      "source": [
        "x = np.array([[1,2],[3,4]], dtype=np.float64)\n",
        "y = np.array([[5,6],[7,8]], dtype=np.float64)\n",
        "\n",
        "print(x + y)\n",
        "print(np.add(x, y))\n",
        "\n",
        "print(x - y)\n",
        "print(np.subtract(x, y))\n",
        "\n",
        "print(x * y)\n",
        "print(np.multiply(x, y))\n",
        "\n",
        "print(np.divide(x, y))\n",
        "print(np.sqrt(x))"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 6.  8.]\n",
            " [10. 12.]]\n",
            "[[ 6.  8.]\n",
            " [10. 12.]]\n",
            "[[-4. -4.]\n",
            " [-4. -4.]]\n",
            "[[-4. -4.]\n",
            " [-4. -4.]]\n",
            "[[ 5. 12.]\n",
            " [21. 32.]]\n",
            "[[ 5. 12.]\n",
            " [21. 32.]]\n",
            "[[0.2        0.33333333]\n",
            " [0.42857143 0.5       ]]\n",
            "[[1.         1.41421356]\n",
            " [1.73205081 2.        ]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sHRt8CB4YmiC",
        "outputId": "6d18c56c-1999-440d-abb8-d306e646b9ea"
      },
      "source": [
        "x = np.array([[1,2],[3,4]])\n",
        "y = np.array([[5,6],[7,8]])\n",
        "\n",
        "v = np.array([9,10])\n",
        "w = np.array([11, 12])\n",
        "\n",
        "# Inner product of vectors\n",
        "print(v.dot(w))\n",
        "print(np.dot(v, w))\n",
        "\n",
        "print(x.dot(v))\n",
        "print(np.dot(x, v))\n",
        "\n",
        "print(x.dot(y))\n",
        "print(np.dot(x, y))"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "219\n",
            "219\n",
            "[29 67]\n",
            "[29 67]\n",
            "[[19 22]\n",
            " [43 50]]\n",
            "[[19 22]\n",
            " [43 50]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0LQCwLuBY4P4",
        "outputId": "be8b073f-28e8-48d0-da85-0ed8ee16eb99"
      },
      "source": [
        "x = np.array([[1,2], [3,4]])\n",
        "print(x)    \n",
        "print(x.T)  \n",
        " \n",
        "v = np.array([1,2,3])\n",
        "print(v)   \n",
        "print(v.T) "
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 2]\n",
            " [3 4]]\n",
            "[[1 3]\n",
            " [2 4]]\n",
            "[1 2 3]\n",
            "[1 2 3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0MZr2IaRZJKd"
      },
      "source": [
        "numpy.argmax()"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "la69V1mmZNF2",
        "outputId": "ad7b9d22-6efd-4513-ad5a-b72f5a5616d2"
      },
      "source": [
        "# Creating 5x4 array\n",
        "array = np.arange(20).reshape(5, 4)\n",
        "print(array)\n",
        "print()\n",
        "print(np.argmax(array))\n",
        "print(np.argmax(array, axis=1))\n",
        "print(np.argmax(array, axis=0))"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 0  1  2  3]\n",
            " [ 4  5  6  7]\n",
            " [ 8  9 10 11]\n",
            " [12 13 14 15]\n",
            " [16 17 18 19]]\n",
            "\n",
            "19\n",
            "[3 3 3 3 3]\n",
            "[4 4 4 4]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9fidrkDwZYvP"
      },
      "source": [
        "Sort"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IifzPgmBZZ-u",
        "outputId": "cc34cda9-7313-4d3d-ed93-c5aba3c3ece7"
      },
      "source": [
        "array = np.array([\n",
        "    [3, 7, 1],\n",
        "    [10, 3, 2],\n",
        "    [5, 6, 7]\n",
        "])\n",
        "print(array)\n",
        "print()\n",
        "\n",
        "# Sort the whole array\n",
        "print(np.sort(array, axis=None))\n",
        "\n",
        "# Sort along each row\n",
        "print(np.sort(array, axis=1))\n",
        "\n",
        "# Sort along each column\n",
        "print(np.sort(array, axis=0))"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 3  7  1]\n",
            " [10  3  2]\n",
            " [ 5  6  7]]\n",
            "\n",
            "[ 1  2  3  3  5  6  7  7 10]\n",
            "[[ 1  3  7]\n",
            " [ 2  3 10]\n",
            " [ 5  6  7]]\n",
            "[[ 3  3  1]\n",
            " [ 5  6  2]\n",
            " [10  7  7]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OUBAjDf5Zf0O"
      },
      "source": [
        "argsort()"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sNDMh0RbZjaI",
        "outputId": "dabbd33f-a4a9-4e9d-fdcf-4e82c43d67aa"
      },
      "source": [
        "array = np.array([28, 13, 45, 12, 4, 8, 0])\n",
        "print(array)\n",
        "\n",
        "print(np.argsort(array))"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[28 13 45 12  4  8  0]\n",
            "[6 4 5 3 1 0 2]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wfiWTXWFZrmJ"
      },
      "source": [
        "mean()"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MtKyvHc2Z6D6",
        "outputId": "5911239f-b78f-48e0-b7a5-f9e6cf62e688"
      },
      "source": [
        "list = [\n",
        "    np.array([3, 2, 8, 9]),\n",
        "    np.array([4, 12, 34, 25, 78]),\n",
        "    np.array([23, 12, 67])\n",
        "]\n",
        "\n",
        "result = []\n",
        "for i in range(len(list)):\n",
        "    result.append(np.mean(list[i]))\n",
        "print(result)"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5.5, 30.6, 34.0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kjaFd349aBO3"
      },
      "source": [
        "Reverse a array"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1_yUr8D5aN-7",
        "outputId": "7486ffcd-6447-441d-ac9d-4a748ae4c748"
      },
      "source": [
        "array = np.array([3, 6, 7, 2, 5, 1, 8])\n",
        "reversedArray = np.flipud(array)\n",
        "print(reversedArray)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[8 1 5 2 7 6 3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E-t7SG_7aS4Z"
      },
      "source": [
        "Checker board pattren"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XzcTtCOFadqR",
        "outputId": "a5bdc5ba-d318-48f4-abfe-e9903eab585d"
      },
      "source": [
        "n = 4\n",
        "\n",
        "# Create a nxn matrix filled with 0\n",
        "matrix = np.zeros((n, n), dtype=int)\n",
        "\n",
        "# fill 1 with alternate rows and column\n",
        "matrix[::2, 1::2] = 1\n",
        "matrix[1::2, ::2] = 1\n",
        "\n",
        "# Print the checkerboard pattern\n",
        "for i in range(n):\n",
        "    for j in range(n):\n",
        "        print(matrix[i][j], end=\" \")\n",
        "    print()"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 1 0 1 \n",
            "1 0 1 0 \n",
            "0 1 0 1 \n",
            "1 0 1 0 \n"
          ]
        }
      ]
    }
  ]
}